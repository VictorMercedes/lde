package ide;

import java_cup.runtime.Symbol;
import java.lang.Math;

parser code
{:
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Integer Numero;
terminal string Identificador;

terminal Igual, Suma, Resta, Multiplicacion, Division, Potencia, Op_relacional,
         Op_booleano, Parentesis_a, Parentesis_c,
         Llave_a, Llave_c, P_coma, Imprimir,
         Int, Clase, Retorna, Flecha, If, ERROR;

non terminal INICIO, SENTENCIA, LISTA_SENTENCIA, DECLARACION,
    SENTENCIA_BOOLEANA, FUNCTION, DECL_FUNCTION, CALL_FUNCTION,
    RETORNAR, IF, IMPRIMIR, CONSTRUCTOR, DECLIST;
non terminal Integer EXPRESSION;

precedence left Suma, Resta;
precedence left Multiplicacion, Division;
precedence right Potencia;

start with INICIO;

INICIO ::=
    Clase Identificador Llave_a Llave_c |
    Clase Identificador Llave_a CONSTRUCTOR Llave_c |
    Clase Identificador Llave_a CONSTRUCTOR LISTA_SENTENCIA Llave_c |
    Clase Identificador Llave_a LISTA_SENTENCIA CONSTRUCTOR Llave_c |
    Clase Identificador Llave_a LISTA_SENTENCIA Llave_c |
    Clase Identificador Llave_a LISTA_SENTENCIA CONSTRUCTOR LISTA_SENTENCIA Llave_c
;
LISTA_SENTENCIA ::=
    SENTENCIA |
    LISTA_SENTENCIA SENTENCIA
;
SENTENCIA ::=
    DECLARACION |
    IF |
    IMPRIMIR |
    RETORNAR |
    FUNCTION
;
EXPRESSION ::=
    Numero:e {: RESULT = new Integer(e); :}
    | EXPRESSION:e1 Suma EXPRESSION:e2 {: RESULT = new Integer((int)e1 + (int)e2);  :}
    | EXPRESSION:e1 Resta EXPRESSION:e2 {: RESULT = new Integer((int)e1 - (int)e2);  :}
    | EXPRESSION:e1 Multiplicacion EXPRESSION:e2 {: RESULT = new Integer((int)e1 * (int)e2); :}
    | EXPRESSION:e1 Division EXPRESSION:e2 {: RESULT = new Integer((int)e1 / (int)e2); :}
    | EXPRESSION:e1 Potencia EXPRESSION:e2 {: RESULT = new Integer((int) Math.pow((int)e1, (int)e2)); :}
;
DECLARACION ::=
    Int Identificador P_coma |
    Int Identificador Igual Numero P_coma
;
SENTENCIA_BOOLEANA ::=
    Op_booleano |
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador
;
RETORNAR ::=
    Retorna Flecha EXPRESSION P_coma |
    Retorna Flecha CALL_FUNCTION P_coma
;
IMPRIMIR ::=
    Imprimir Flecha EXPRESSION:e P_coma
  | Imprimir Flecha CALL_FUNCTION P_coma
;
IF ::=
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
CALL_FUNCTION ::=
    Identificador Parentesis_a Parentesis_c
    | Identificador Parentesis_a Numero Parentesis_c
    | Identificador Parentesis_a Identificador Parentesis_c
;
DECL_FUNCTION ::=
    Int Identificador Parentesis_a Parentesis_c |
    Int Identificador Parentesis_a Int Identificador Parentesis_c
;
FUNCTION ::=
    DECL_FUNCTION Llave_a LISTA_SENTENCIA Llave_c |
    DECL_FUNCTION Llave_a Llave_c
;
CONSTRUCTOR ::=
    Identificador Parentesis_a Parentesis_c Llave_a LISTA_SENTENCIA Llave_c
;